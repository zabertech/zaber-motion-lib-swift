// ===== THIS FILE IS GENERATED FROM A TEMPLATE ===== //
// ============== DO NOT EDIT DIRECTLY ============== //

import Darwin
import DtoRequests
import Gateway
import ZaberMotionExceptions

/**
 Connection transport backend allowing to carry Zaber ASCII protocol over arbitrary protocols.
 Can only be used with a single connection.
 */
public final class Transport: @unchecked Sendable {

    package init(transportId: Int) {
        self.transportId = transportId
    }

    /**
     The transport ID identifies this transport instance with the underlying library.
     */
    public let transportId: Int

    /**
     Creates new instance allowing to read/write messages from/to a single connection.

     - Returns: New instance of transport.
     */
    public static func open() throws -> Transport {
        let request = DtoRequests.EmptyRequest()

        let response = try Gateway.callSync("custom/interface/open", request, DtoRequests.CustomInterfaceOpenResponse.fromByteArray)
        return Transport(transportId: response.transportId)
    }

    /**
     Closes the transport.
     Also closes the connection using the transport.
     */
    public func close() async throws  {
        var request = DtoRequests.CustomInterfaceCloseRequest()
        request.transportId = self.transportId

        try await Gateway.callAsync("custom/interface/close", request)
    }

    /**
     Closes the transport with error.
     Also closes the connection using the transport propagating the error.

     - Parameters:
        - errorMessage: Error to be propagated.
     */
    public func closeWithError(errorMessage: String) async throws  {
        var request = DtoRequests.CustomInterfaceCloseRequest()
        request.transportId = self.transportId
        request.errorMessage = errorMessage

        try await Gateway.callAsync("custom/interface/close", request)
    }

    /**
     Writes a single message to the connection.
     The message will be processed as a reply from the device.

     - Parameters:
        - message: Single message of Zaber ASCII protocol.
     */
    public func write(message: String) async throws  {
        var request = DtoRequests.CustomInterfaceWriteRequest()
        request.transportId = self.transportId
        request.message = message

        try await Gateway.callAsync("custom/interface/write", request)
    }

    /**
     Reads a single message generated by the connection.
     The message is a request for the device.
     Read should be called continuously in a loop to ensure all generated messages are processed.
     Subsequent read call confirms that previous message was delivered to the device.

     - Returns: Message generated by the connection.
     */
    public func read() async throws -> String {
        var request = DtoRequests.CustomInterfaceReadRequest()
        request.transportId = self.transportId

        let response = try await Gateway.callAsync("custom/interface/read", request, DtoRequests.StringResponse.fromByteArray)
        return response.value
    }

    /**
     Frees the transport instance.

     - Parameters:
        - transportId: Transport ID to be freed.
     */
    static func free(transportId: Int) throws  {
        var request = DtoRequests.CustomInterfaceCloseRequest()
        request.transportId = transportId

        try Gateway.callSync("custom/interface/free", request)
    }

    public func close() throws  {
        var request = DtoRequests.CustomInterfaceCloseRequest()
        request.transportId = self.transportId

        try Gateway.callSync("custom/interface/close", request)
    }

    deinit {
        guard self.transportId >= 0 else { return }

        do {
            try close()
        } catch let e as MotionLibException {
            fputs("ZML Error: \(e.toString())", stderr)
        } catch {
            fputs("System Error: \(error)", stderr)
        }

        do {
            try Transport.free(transportId: self.transportId)
        } catch let e as MotionLibException {
            fputs("ZML Error: \(e.toString())", stderr)
        } catch {
            fputs("System Error: \(error)", stderr)
        }
    }
}
